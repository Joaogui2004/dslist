package com.joaogui.dslist.dto.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.joaogui.dslist.dto.GameMinDTO;
import com.joaogui.dslist.entities.Game;
import com.joaogui.dslist.repositories.GameRepository;

// registrar o componente ‚¨áÔ∏è
@Service


public class GameService {

	// Injetar um componente no outro (composi√ß√£o de componentes) = inje√ß√£o de depend√™ncias de componentes no sistema.
	
	// Repository devolve Entidades 
	// Service pega Entidades e devolve DTO para o "mundo exterior".
	
	// Como GameRepository √© um componente do sistema, deve-se injetar uns nos outros para compor o sistema em v√°rios componentes. 
	@Autowired // Anota√ß√£o que instancia(puxa) (sem construtor) a camada de baixo(GameRepository). 
	private GameRepository gameRepository; // Inje√ß√£o de GameRepository dentro de GameService. GameService √© uma camada acima de Repository. Ela puxa as Entidades. 
	
	public List<GameMinDTO> findAll(){
		List<Game> result = gameRepository.findAll();
		List<GameMinDTO> dto = result.stream().map(x -> new GameMinDTO(x)).toList(); // Transforma de entidade para dto. 
		return dto;
	}
	// stream √© uma lib que permite fazer opera√ß√µes com sequ√™ncias de dados.
	// .map() transforma de uma coisa para outra ("todo objeto x original que √© Game, desejo transformar (->) em um new GameMinDTO(x)". 
	// GameMinDTO(x) >>> "transforme para GameMinDTO o que tiver como par√¢metro, nesse caso, x"üí≠
}
